#!/usr/bin/python3
# -*- coding: utf-8 -*-

from gi.repository import Gtk, Gdk, GdkPixbuf
import sys, os, shutil
import webbrowser
sys.path.append('/usr/share/complex-ovpn')
os.chdir('/usr/share/complex-ovpn')
import serv

class GUI_glade():

    def main_gui(self):
        self.gladefile = ("GUI_gtk.glade")
        self.builder = Gtk.Builder()
        self.builder.add_from_file(self.gladefile)
        self.builder.connect_signals(self)
        
    def adm_client_gui(self):
        self.gladefile = ("adm_clients.glade")
        self.builder = Gtk.Builder()
        self.builder.add_from_file(self.gladefile)
        self.builder.connect_signals(self)

    def __init__(self):
        self.main_gui()
        self.window = self.builder.get_object("window_main")

    def window_main_destroy(self, *args): #Закрытие главного окна программы
        Gtk.main_quit()

    def create_keys_server (self, window, *args):       #Создание ключей сервера
        dialog = Gtk.MessageDialog(window, 0, Gtk.MessageType.QUESTION,  Gtk.ButtonsType.YES_NO, "Сейчас будет выполнена первоначальная настройка сервера OpenVPN")
        dialog.format_secondary_text("Эта операция может занять несколько минут. Для подтверждения нажмите кнопку \"Да\"")
        response = dialog.run()
        if response == Gtk.ResponseType.YES:
            serv.main()
        dialog.destroy()   

    def window_serv_conf_view (self, *args): #Открытие окна: Создание конфигурационного файла сервера
        self.main_gui()
        self.window_serv_conf = self.builder.get_object("window_serv_conf")
        self.window_serv_conf.show_all()

    def on_button_simple_save_serv_conf (self, window, *args): # сохранение простой конфигурации сервера
        entry_1 = self.builder.get_object("entry_out_ip")
        out_ip = entry_1.get_text()
        entry_2 = self.builder.get_object("entry_port")
        port = entry_2.get_text()
        entry_3 = self.builder.get_object("entry_proto")
        proto = entry_3.get_text()
        entry_4 = self.builder.get_object("entry_ip")
        ip = entry_4.get_text()
        entry_5 = self.builder.get_object("entry_mask")
        mask = entry_5.get_text()
        checkbutton_route = self.builder.get_object("checkbutton_route")
        if checkbutton_route.get_active():
            if out_ip and port and proto and ip and mask:
                lists = serv.server_config_file(port, proto, ip, mask)
                serv.write_conf_serv (lists, out_ip, port, proto)
                window.destroy()
            else:
                self.window_dialog_error(window)
        else:
            if out_ip and port and proto:
                lists = serv.server_config_file(port, proto)
                serv.write_conf_serv (lists, out_ip, port, proto)
                window.destroy()
            else:
                self.window_dialog_error(window)

    def on_checkbutton_route (self, *args):
        checkbutton_route = self.builder.get_object("checkbutton_route")
        entry_ip = self.builder.get_object("entry_ip")
        entry_mask = self.builder.get_object("entry_mask")
        if checkbutton_route.get_active():
            entry_ip.set_sensitive(True)
            entry_mask.set_sensitive(True)
        else:
            entry_ip.set_sensitive(False)
            entry_mask.set_sensitive(False)
        
    def window_serv_conf_close (self, window, *args):
        window.destroy()
    
    def window_serv_param_view (self, executed, *argv):
        self.main_gui()
        self.window_serv_param = self.builder.get_object("window_serv_param")
        ret = serv.set_param_serv()
        if ret == 1:
            pass
        else:
            country, province, city, ou, org, email = serv.set_param_serv()
            entry_5 = self.builder.get_object("entry5")
            entry_5.set_text(country)
            entry_6 = self.builder.get_object("entry6")
            entry_6.set_text(province)
            entry_7 = self.builder.get_object("entry7")
            entry_7.set_text(city)
            entry_9 = self.builder.get_object("entry9")
            entry_9.set_text(ou)
            entry_10 = self.builder.get_object("entry10")
            entry_10.set_text(org)
            entry_11 = self.builder.get_object("entry11")
            entry_11.set_text(email)
        self.window_serv_param.show_all()

    def on_button_save_serv_param (self, window, *args): # сохранение парамметров сервера
        entry_5 = self.builder.get_object("entry5")
        country = entry_5.get_text()
        entry_6 = self.builder.get_object("entry6")
        province = entry_6.get_text()
        entry_7 = self.builder.get_object("entry7")
        city = entry_7.get_text()
        entry_9 = self.builder.get_object("entry9")
        ou = entry_9.get_text()
        entry_10 = self.builder.get_object("entry10")
        org = entry_10.get_text()
        entry_11 = self.builder.get_object("entry11")
        email = entry_11.get_text()
        if country and province and city and ou and org and email:
            serv.get_param_serv(country, province, city, ou, org, email)
            window.destroy()
        else:
            self.window_dialog_error(window) 

    def window_serv_param_close(self, window, *args):
        window.destroy()
        
    def window_adm_clients_view (self, *args): #администрирование клиентов
        self.adm_client_gui()
        self.window_view_all_client = self.builder.get_object("window_view_all_clients")
        self.view_all_clients()
        self.window_view_all_client.show_all()
    
    def view_all_clients(self, *args):
        lists = serv.pars_all_clients()
        lists.pop(0)
        for i in range (len(lists)):
            box = self.builder.get_object("box_all_clients")
            client = Gtk.CheckButton (label = lists[i])
            client.set_active(True)
            client.set_margin_left(20)
            client.connect("toggled", self.window_revoke_cert_view, lists[i])
            box.pack_start(client, True, True, 0)

    def window_adm_clients_close (self, window, *args):
        window.destroy()
        
    def window_add_client_view (self, *args):#добавить нового клиента
        self.adm_client_gui()
        self.window_view_all_client = self.builder.get_object("window_add_client")
        self.window_view_all_client.show_all()
        self.temp_add_client = args[0]
        
    def window_revoke_cert_view (self, button, label, *args):# отозвать сертификат клиента
        self.adm_client_gui()
        self.window_revoke_cert = self.builder.get_object("window_revoke_cert")
        self.window_revoke_cert.show_all()
        label_client_name = self.builder.get_object("label_client_name")
        label_client_name.set_label(label)
        
    def on_button_revoke_cert (self, *args): # отзыв сертификата
        label_name = self.builder.get_object("label_client_name")
        client_name = label_name.get_label()
        serv.revoke_cert (client_name)
        
    def window_revoke_cert_close(self, window, *args):
        window.destroy()
        self.window_view_all_client.destroy()
        self.adm_client_gui()
        self.window_view_all_client = self.builder.get_object("window_view_all_clients")
        self.view_all_clients()
        self.window_view_all_client.show_all()        
        
    def on_button_add_new_client (self, window, *args): # добавление нового клиента
        entry_2 = self.builder.get_object("entry2")
        self.client_name = entry_2.get_text()
        if self.client_name :
            if serv.new_client(self.client_name):
                self.window_dialog_error(window)
        else:
             self.window_dialog_error(window)      
        
    def window_add_client_close (self, window, *args):        
        window.destroy()
        self.temp_add_client.destroy()
        self.window_view_all_client = self.builder.get_object("window_view_all_clients")
        self.view_all_clients()
        self.window_view_all_client.show_all()        
        
    def window_save_client_conf_view (self, *args): #сохранение конфигурационных файлов клиентов
        self.adm_client_gui()
        self.window_view_all_client = self.builder.get_object("window_save_client_conf")
        self.window_view_all_client.show_all()
        
    def window_save_client_conf_close(self, window, *args):
        window.destroy()
        
    def on_button_save_client_conf(self, window, *args): # сохранение клиентских файлов в указанную дирректорию
        entry_client_name = self.builder.get_object("entry_client_name")
        client_name = entry_client_name.get_text()
        if client_name :
            if serv.save_client_conf(client_name):
                self.window_dialog_error(window)
            else:
                os_list = self.builder.get_object("combobox_os")
                if os_list.get_active_id () == "Windows":
                    serv.Windows_client_conf(client_name)
                serv.archive_client_conf(client_name)        
                window_dialog_save = Gtk.FileChooserDialog("Сохранить архив " + client_name + ".zip", window,
                    Gtk.FileChooserAction.SELECT_FOLDER, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                     Gtk.STOCK_SAVE, Gtk.ResponseType.OK))
                window_dialog_save.set_current_folder("/home")
                response = window_dialog_save.run()
                if response == Gtk.ResponseType.OK:
                    folder = window_dialog_save.get_filename()
                    serv.archive_client_conf_save_in(client_name, folder)
                window.destroy()
                window_dialog_save.destroy()
        else:
             self.window_dialog_error(window)      
        
    def window_about_view (self, *args):
        self.main_gui()
        self.aboutdialog = self.builder.get_object("aboutdialog")
        logo = GdkPixbuf.Pixbuf.new_from_file("icon.png")
        self.aboutdialog.set_logo(logo)
        self.aboutdialog.run()
        self.aboutdialog.destroy()
        
    def window_dialog_error (self, window, *args):
        dialog_error = Gtk.MessageDialog(window, 0, Gtk.MessageType.ERROR, Gtk.ButtonsType.CANCEL, "Вы ввели некорректные данные!")
        dialog_error.format_secondary_text("Повторите ввод")
        dialog_error.set_title("Ошибка ввода")
        dialog_error.run()
        dialog_error.destroy()

    def configuring_clients(self, *args):
        webbrowser.open_new_tab("web_faq/index.html")

def _main():
    gtk_gui = GUI_glade()
    gtk_gui.window.show_all()
    Gtk.main()

if __name__ == "__main__":
    _main()
